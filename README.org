* setting up a fresh ubuntu installation
* basic installs
** basics
#+BEGIN_SRC shell
sudo apt install git git-annex vim nautilus-dropbox emacs mercurial
sudo apt install xclip xdg-utils htop openssh-client curl tmux zsh samba samba-common smbclient build-essential python3-pip chromium-browser tree vlc openvpn pandoc
#+END_SRC
** sketching and drafting
#+BEGIN_SRC shell
sudo apt install inkscape dia pinta
#+END_SRC

** latex
#+BEGIN_SRC shell
sudo apt-get install texlive-full biber latexmk zathura
#+END_SRC

** pdftk
It has been removed from the official repositories, but you might be able to find it here:
#+BEGIN_SRC shell
    sudo add-apt-repository ppa:malteworld/ppa
    sudo apt update
    sudo apt install pdftk
#+END_SRC

** zsh
To install zsh, run (at your own risk)
#+BEGIN_SRC shell
    sh -c "$(wget https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)"
#+END_SRC

To set zsh as the current users default terminal, do (as a user, not as
sudo)

#+BEGIN_SRC shell
    chsh -s $(which zsh)
#+END_SRC

then log out and log back in.

** fzf - command line fuzzy finder
To enable fuzzy search completion in zsh and bash, install [[https://github.com/junegunn/fzf][~fzf~]]
#+BEGIN_SRC shell
git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf
~/.fzf/install
#+END_SRC
and let it modify the ~.zshrc~ and ~.bashrc~ files. 

* dotfiles
When git is installed, do this to initialize and pull your dotfiles from Github
#+BEGIN_SRC shell
    cd $HOME
    git init
    git remote add origin git@github.com:534ttl3/dotfiles.git
    git remote -v
    git config --global user.email "you@example.com"
    git config --global user.name "Your Name"
    git pull
    git config --global push.default simple
    git checkout master
    git branch --set-upstream-to=origin/master master
#+END_SRC

this gets you a list of already-existing files, add them to the new commit then merge a remote branch (a similar system) into the already existing branch (new files) and resolve conflicts

** python: the whole shebang
This installs packages for your system python. For specific projects, you may want to setup seperate virtual environments. 
Always install your packages to the right locations (=pip= could be =pip2=, not =pip3=)
#+BEGIN_SRC shell
    sudo pip3 install scipy matplotlib numba flake8 ipdb sympy
#+END_SRC

Matplotlib could use tkinter, so do
#+BEGIN_SRC shell
    sudo apt install python3-tk
#+END_SRC

* customizing/post-processing installed software
** emacs
Some emacs modules rely on external programs being installed from somewhere else. 
*** ivy, swiper, counsel
For these 3 packages (smart autocompletion), you need to install some external programs
#+BEGIN_SRC shell
sudo apt install elpa-counsel
#+END_SRC

*** C++
install GNU GLOBAL (editor-independent code tagging system, works with many languages including C++ and Python)
#+BEGIN_SRC shell
sudo apt install global
#+END_SRC

*** extra documentation
Elisp tutorial and manual for emacs
#+BEGIN_SRC sh
sudo apt install emacs25-common-non-dfsg
#+END_SRC
** vim
Yes, I do use vim in some situations.
*** install vundle plugin manager
#+BEGIN_SRC shell
    git clone https://github.com/gmarik/Vundle.vim.git $HOME/.vim/bundle/Vundle.vim
    vim -c PluginInstall
#+END_SRC

*** plugins from external sources
**** python folding
#+BEGIN_SRC shell
    mkdir -p ~/.vim/ftplugin
#+END_SRC

I prefer

#+BEGIN_SRC shell
    wget -O ~/.vim/ftplugin/python.vim https://www.vim.org/scripts/download_script.php?src_id=10034
#+END_SRC

But this one is also good

#+BEGIN_SRC shell
    wget -O ~/.vim/ftplugin/python.vim http://www.vim.org/scripts/download_script.php?src_id=5492
#+END_SRC

*** dependencies for some plugins
#+BEGIN_SRC shell
    pip install jedi
    pip install autopep8
#+END_SRC
*** installing the packages
from within vim, run ~:PluginInstall~. 

** desktop environment
*** setup shortcuts
Go to ~Settings~ -> ~Devices~ -> ~Keyboard~ and put the following keyboard shortcuts: 

- move up/down a workspace: ~C~ ~Alt~ ~Up/Down~
- move a window to the upper/right/lower/left worspace: ~C~ ~S~ ~Alt~ ~Up/Right/Down/Left~

*** customize GUI
Install Unity-Tweak-Tool (for simple gui settings)

#+BEGIN_SRC shell
    sudo apt-get install notify-osd overlay-scrollbar unity-tweak-tool
#+END_SRC

Install Compiz Manager (for advanced gui settings)
#+BEGIN_SRC shell
    sudo apt-get install compizconfig-settings-manager 
    sudo apt-get install compiz compiz-gnome compiz-plugins-extra 
#+END_SRC

* connecting to remote servers via ssh
Make sure you have a key, but don't override it
#+BEGIN_SRC shell
ssh-keygen
#+END_SRC

You might want to share your public ssh key, e.g. with Github.
#+BEGIN_SRC shell
cat $HOME/.ssh/id_rsa.pub
#+END_SRC

** ssh configs settings
This is the file in which you can setup your ssh connections and give them aliases:
#+BEGIN_SRC shell
cat ~/.ssh/config
#+END_SRC

For each connection you want to add, run
#+BEGIN_SRC shell
ssh-copy-id [user]@[hostname]
#+END_SRC

Now, you can easily connect with the ssh server using
#+BEGIN_SRC shell
ssh [user]@[hostname]
#+END_SRC

* hobby programs
** audio editing
You will want to install the Kxstudio repository and apps, because it makes a workflow with Jack + Pulseaudio + Alsa + Midi way more streamlined. See https://kxstudio.linuxaudio.org/Repositories for
updated installation instructions.

You probably want Jack
#+BEGIN_SRC shell
sudo apt-get install jackd qjackctl 
#+END_SRC

and the additional kxstudio stuff like Cadence, Qsampler, Carla. 

You in fact probably want all the ~kxstudio-meta~ packages too (plugins, vsts, linux vsts, wine, ...)
#+BEGIN_SRC shell
sudo apt install kxstudio-meta-all
#+END_SRC

** Panda3d
Fully-fledged game programming engine based on C++, with Python interface. 
Detailed information here: =https://github.com/panda3d/panda3d=. 

some dependencies for p3d on linux are

#+BEGIN_SRC shell
    sudo apt-get install build-essential pkg-config python-dev libpng-dev
    libjpeg-dev libtiff-dev zlib1g-dev libssl-dev libx11-dev libgl1-mesa-dev
    libxrandr-dev libxxf86dga-dev libxcursor-dev bison flex libfreetype6-dev
    libvorbis-dev libeigen3-dev libopenal-dev libode-dev libbullet-dev
    nvidia-cg-toolkit libgtk2.0-dev
#+END_SRC

You may install it directly from their server (for python2 use =pip= instead of =pip3=),

#+BEGIN_SRC shell
    pip3 install --pre --extra-index-url https://archive.panda3d.org/ panda3d
#+END_SRC

Now you might already be able to run p3d programs.

