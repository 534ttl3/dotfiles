* Computer Issues
** Evaluation of this emacs-lisp code block is disabled.
This error came up, altough I had set
#+BEGIN_SRC emacs-lisp
;; make sure that python and elisp code
;; blocks can be evaluated in org-mode
(org-babel-do-load-languages
    'org-babel-load-languages
    '((emacs-lisp . t)
    (python . t)
    (sh . t)
    (haskell . t))
    )
#+END_SRC

in my ~.emacs~.

To fix it, I deleted all compiled ~.elc~ files in ~~/.emacs.d/elpa/org-[VERSION]/~: 
#+BEGIN_SRC shell
rm ~/.emacs.d/elpa/org-[VERSION]/*.elc
#+END_SRC

** Sound doesn't work on ubuntu

* API Notes
** Panda3d 
*** Panda3d internal geometry classes
Each **GeomVertex** has a position, but can also have other geometric data other associated with it, like normal vector (there's almost always redundant information, since it would suffice to define one normal vector for a plane made of 3 GeomVertex's), texcoord, color, ... , custom (whatever set of data you want to give to the shader)). For each vertex, this set of information is stored in a **GeomVertexData** object. You can modify these *column names* (see the **GeomVertexFormat** class for a list of reserved column names). 

Each **GeomVertexData** is usually a single 2d Array, stored as a contiguous
block in memory. It is also possible to distribute the data of vertices and
have different sets of columns packaged into different locations in memory.
Each of these blocks are then called **GeomVertexArray**. This is useful if you need to render multiple objects with e.g. the same geometry, but want to modify the lighting (normal) or color).

The **GeomVertexFormat** object describes how the columns of a GeomVertexData are ordered and named, and exactly what kind of numeric data is stored in each column, e.g. it gives the relatively raw data in the **GeomVertexData** objects meaning. (In practice, you first need to define a **GeomVertexFormat** to populate a **GeomVertexData** object)

**GeomVertexArrayData** contains a contiguous 2d array of data. To know how to interpret that data, a **GeomVertexArrayFormat** is needed, which contains several **GeomVertexColumn** (beware: not GeomVertexColumnFormat) objects for even more fine-grained specification of what data is in what column. 
Each **GeomVertexColumn** has a name, numeric type and contents, that are
assigned and can be queried. 

In Panda3d, to connect together vertices from a **GeomVertexArray(Data)**,
first this list of vertices is indexed and then the the indices are used to
access the vertex data. To define a primitive **GeomPrimitive** you use the
classes GeomTriangles, GeomTristrips, GeomTrifans, GeomLines, GeomLinestrips, GeomPoints, ...).

A **GeomVertexData** and several **GeomPrimitive** objects are collected to
gether to make up a **Geom** object, a single piece of renderable geomtry.
(note that the **GeomVertexFormat** objects aren't in there). 

One **GeomVertexData** may be shared among many different **Geoms** (each of
which might use a different subset of its vertices). 

A **Geom** can only have one primitive type (Tri*, Line*, or Points) You can call geom.getPrimitiveType() to determine the (fundamental) primitive type stored within a particular Geom. 

Conveniently named, a **GeomNode** is what pulls the **Geom** (geometry data
unattached to any scene and without rendering state) into the scene graph. Each **GeomNode** contains a list of tuples (**Geom**, **RenderState**). The **RenderState** also includes the texture image itself. These render state definitions are therefore not a seperate node, but included in the **GeomNode**, and they override any state inherited from the scene graph, unless the scene graph state definitons have a priority > 0.

A **BoundingVolume** is a piece of geometry of a node and it's children
enclosing all points down the line and is used for collision detection and
culling, it is automatically generated by Panda3D. Useful functions are
getBounds() and showBounds(). The **BoundingVolume** can be e.g. a **BoundingSphere**. Panda doesn't always compute the minimal (tight) bounds, because that would require much calculation, it often just approximates it and calculates loose bounds. You can in fact get the tightest possible box shape with getTightBounds() and show it with showTightBounds(). With setBounds(BoundingVolume(...)) and setFinal(1), you can manually assign Bounding Volumes. 

*** Generating Geometry Procedurally
The first thing you need to render anything is a valid **GeomVertexFormat**,
which specifies what data you would want to give (there are pre-defined
formats which can make this task easier) to the shader/the graphics card. You need to do e.g. sth. like

```
array = GeomVertexArrayFormat()
array.addColumn("vertex", 3, Geom.NTFloat32, Geom.CPoint)
array.addColumn("texcoord", 2, Geom.NTFloat32, Geom.CTexcoord)
```

The name of a column should be an **InternalName** object (enables fast
lookups).

Pass this array to a **GeomVertexFormat**

```
format = GeomVertexFormat()
format.addArray(array)
```

Once your format is complete, register it (this is required for some internal OpenGL/DirectX configuration stuff, it might also play a role in making a proper shader that uses all the supplied data)

```
format = GeomVertexFormat.registerFormat(format)
```

The old GeomVertexFormat should be discarded once you use a new
GeomVertexFormat, so the above syntax should almost always be used. 
This seems to be a lot of overhead just to render a thing, but the *thing*'s
information must be interpreted properly and passed to the underlying API
properly, so it is necessary. The more you need to specify, the more control
you have on what actually happens. 

The pre-defined **GeomVertexFormat** that I would use in most situations is

```
format = GeomVertexFormat.getV3n3c4()    
```

You create the **GeomVertexData** by calling 

```
vdata = GeomVertexData('name', format, Geom.UHStatic)
```

where Geom.UHStatic stands for a *Usage Hint* to Panda3D, that it will be
static data (the vertices' geometry will remain unchanged). It's just a hint
though, if you want to change the actual vertex data (e.g. position) to create an animation, maybe you should give the hint Geom.UHDynamic instead (this can accellerate performance by avoiding unnecessary caching). 

Optionally, for a **GeomVertexData**, you can manually boost performance by explicitly setting the number of rows (number of vertices?) by calling ``vdata.setNumRows(4)``

To fill in the actual data tuples into the row (referring to a specific
vertex), appending it to the column, you first create for each column a
**GeomVertexWriter** object, which you then add (append) data to using
``add_ddataXX()``, e.g. 

```
vertex = GeomVertexWriter(vdata, 'vertex')
color = GeomVertexWriter(vdata, 'color')
```
and then
```
vertex.addData3f(1, 0, 0)
color.addData4f(0, 0, 1, 1)
 
vertex.addData3f(1, 1, 0)
color.addData4f(0, 0, 1, 1)
 
vertex.addData3f(0, 1, 0)
color.addData4f(0, 0, 1, 1)
 
vertex.addData3f(0, 0, 0)
color.addData4f(0, 0, 1, 1)
```

(Not in manual: There are functions like ``setRow(int row)`` and ``setDataXX()`` to access 
individual rows and columns and modify data in-place.)

To render anything, you need to instantiate a **GeomPrimitive**, and give it
the indices of the vertices to use in a particular **GeomVertexData** object. 

To draw some triangles (numbers are indices of vertices), do 

```
prim = GeomTriangles(Geom.UHStatic)
 
prim.addVertex(0)
prim.addVertex(1)
prim.addVertex(2)
# thats the first triangle
 
# you can also add a few at once
prim.addVertices(2, 1, 3)
 
prim.addVertices(0, 5, 6)
```

It is recommended, but not strictly necessary to also call ``close_primitive()``
after adding all vertices, especially for variable number of vertices
primitives e.g. for **GeomLinestrips**. You can also give a usage hint (almost
always ``Geom.UH_static``, since usually, if you intend to animate the
vertices, you would operate on the vertices, not the indices). 

There are several utility functions to add vertices by their index: 

```
add_vertices(v1, v2)
add_vertices(v1, v2, v3)
add_vertices(v1, v2, v3, v4)

add_consecutive_vertices(start, numVertices)

add_next_vertices(numVertices)
```
None of these call ``close_primitive()``, which is recommended you call
explicitly after having added all your vertices. 

To put your geometry into the scene graph, you need a **Geom** object and a
**GeomNode**.

```
geom = Geom(vdata)
geom.addPrimitive(prim)
 
node = GeomNode('gnode')
node.addGeom(geom)
 
nodePath = render.attachNewNode(node)
```

There is only one **GeomVertexData** associated with any particular **Geom**
(set it later using geom.setVertexData()).

Again: A **GeomNode** may include multiple **Geoms**, and each **Geom** may include
multiple **GeomPrimitives**. (However, all of the primitives added to a **Geom** must
have the same fundamental primitive type: triangles, lines, or points.)

    Editing Stuff in Blender and loading into Panda3d
    In Blender, you can install the panda3d .egg importer by downloading the repo
    at https://github.com/rdb/blender-egg-importer as .zip and going to File ->
    User Preferences -> Addons -> Install from .zip file, and activating it
    afterwards.

    The best and most famous exporter is according to panda3d.org the YABEEE
export addon, that you can download from it's github page as a .zip and then install
the addon from the file. 

    In Blender, to put the 3d cursor at blenders origin, use ``Ctrl + C``

    In Blender, to put the model's origin (yellow dot) to the position of the
    cursor, use ``Ctrl + Alt + Shift + C`` and select the appropriate option.

    In Blender, the **Pivot Point** is the Point, where the mini-3d Axes are shown. Depending on where the pivot point is, different operations  (e.g. scaling, rotating) affect the object differently.

To be able to manually position the camera using (``ShowBase.camera.setPos()``), you need to explicitly call ``self.disableMouse()`` at the beginning.

Apparently, ``prim.close_primitive()`` and ``prim.closePrimitive()`` are the
same thing. In 1.9.4, there apparently is only ``prim.closePrimitive()``. So,
if in doubt, call ``prim.closePrimitive()`` or nothing at all, since I don't
think it's necessary. 



Tinkering around with Inkscape 
    To make the complicated ends of latex curly brackets a path, you have to 
    ungroup (Ctrl + Shift + G) and unlink clones (Alt + Shift + D) repeatedly, 
    then you can select the nodes of the path. 


If pip2.x aka pip or pip3 is not installed: 
```
    sudo apt-get install python-pip
    sudo apt-get install python3-pip
```

Tinkering around with SVG Libraries:
    I want to render pdf (or even better svg) in panda3d
    This piece of code 
    https://discourse.panda3d.org/t/vector-graphics-on-textures-with-gizeh-cairo/15476
    caught my attention. 

    To try this out, you need **Gizeh**, a python package that depends on **Cairo**

    Before installing these, upgrade your setuptools: 
    ```
    sudo pip install --upgrade setuptools
    ```
    Then install **Cairo** and **Gizeh**
    ```
    sudo apt-get install libcairo2-dev
    sudo pip install gizeh
    ```

What do I actually need now?

- From now, on creating 2d elements and animating them should pose much less of
  a problem, since I have direct access to the vertex data. 

- For videos (mp4) that explain math, I need only bitmap files (since the video
  itself is also limited in resolution). **I need a way to convert pdfs (or dvis) to
  bitmaps with transparent background.** (
  - Sympy: writes the equations to actual files with white background and black font. I'm not sure if it is also able to write to a **BytesIO**-like object, which would make it possible to
    store the files in a buffer not need to make the program write it back to the file
system (harddrive is slow). 
  - Cairo: can read in pdfs and convert them to bitmaps and even svgs (and can
    probably also calculate intermediate hermitian spline points in bezier
    curves)
  - LaTeX itself can be called from within python using a subprocess. Also,
    LaTeX integrates now a function directly, which automatically makes a call
    to convert the pdf to a png file. You then write to disk (latex file), read
    from disk (latex file), write to disk (pdf and png) and read from disk again
    (read png as texture), which may be quite expensive, but the easiest solution
    so far) 

What are putoff-tasks that would be cool but probably come with too many
difficulties ?

- putoff-task: In Panda3d itself, I don't necessarily need to store latex elements as vector
  data (that is sampled bezier curves with only straight lines connecting
nodes), I could just render all latex elements as sprites with white/colors on
transparent/halfway transparent background. Morphing sprites into other sprites
should also work (by animating the quad's corners and using double
  textures where one fades in and the other fades out)

- putoff-task: use actual vector graphics tools to render everything, like
  cairo. That would make it possible to create state machines in which you can
  navigate visually though problems, changeing interactively back and forth
  (interacting with the graphics themselves). I don't know how expensive it is to
  render animated svg graphics. 


Do 10. Mai 21:33:05 CEST 2018 
* Version-Control Notes
** Managing large binary files alongside git
Sat Apr 13 29:30:12 CEST 2018 
(https://docs.blender.org/api/blender_python_api_2_68_release/contents.html).
I tried writing python scripts with blender GUI open at the same time in
it’s Text Block and interactive console mode, but found debugging to be
very inefficient and mentally exhausting, because one had to constantly
reload scripts and re-open blender. I now learned ( https://docs.blender.org/api/blender_python_api_2_68_release/info_tips_and_tricks.html
) that in a text block you can re-load a script that you edit in an
external Editor/IDE. That still uses Blender and launches an insulated
python interpreter within blender, enabling the use of the `import bpy`
library. Sadly though, when writing custom scripts from outside blenders
built-in interactive console, there is no code completion, because `bpy`
sources aren’t accessible from the outside (for some reason). For python
programmers who want to run a python script as the main process and call
the blender library `import bpy` as a module from within python (as
opposed to the standard way, where blender calls python from within it’s
process), there is a way to build blender from source with slightly
modified options for CMake (https://wiki.blender.org/index.php/User:Ideasman42/BlenderAsPyModule), so that after proper configuration you can use only python scripts to call blender and produce an output, and also providing the source and
code completion from outside the blender GUI. I still have to figure
out, in what ways the behaviour differs for both workflows (combination
of GUI and interactive console vs only scripting).
I now pulled all of blenders sources (
`https://git.blender.org/blender.git` ) and built dependencies according
to the instructions at
<https://wiki.blender.org/index.php/Dev:Doc/Building_Blender/Linux/Ubuntu/CMake>.
Especially installing all dependencies (automatically with the provided
[install\_deps.sh](install_deps.sh) script) took a long time and some
things that are already installed may have been built from source code
again. I am wondering if a `make install` will then also override the
already installed things (like numpy) and if that will cause a broken
installation or redundancies.
The next step is to build Blender using CMake. I’m not quite sure, where
the provided CMake options are to be inserted. Also, I don’t know where
all the `bpy` sources are going to be added to (probably the usual local
or system-wide installation directories). Also, for Jedi-Vim I’m not
sure if it will find blenders sources for code-completion and syntax
checking.

OK, I now know what CMake is, great (It’s a generator for buildsystems,
it can generate GNU-Makefiles to be executed with `make`, btw. there are
other buildsystems apart from GNU `make` and on other platforms, not
just Linux). You can specify options like this:
`cmake -DWITH_PYTHON_INSTALL=OFF -DWITH_PLAYER=OFF -DWITH_PYTHON_MODULE=ON ../blender`
This will setup the appropriate GNU Makefile and `make` should work as
expected.

 

Mon Apr 16 14:59:56 CEST 2018

Setting up a virtual lab environment for system administration tests

It is important to have a lab environment/network to *play around* with
installations and configurations. Testing in a lab system removes a
large part of the risk when it comes to making changes in an already
working system. Since the samba server would be linux server with
multiple windows and unix clients, the lab network needs to consist of
at least one host acting as the samba server (here: non-virtual ubuntu)
and two clients (here: two windows virtual machines). This virtual lab
needs to be properly configured first (making virtual snapshots from
which you can quickly spin up clients with custom configurations, here
VirtualBox is used).
TODO:

-   Remove current double-boot and install one private Ubuntu (500 GB)
    and one *Testing* Ubuntu (300 GB) (I doubt that I have enough memory
    and power to run 4 virtual machines alongside each other) alongside
    with their respective swap partitions (each 15 GB) and a seperate
    empty FAT32 partition, for file sharing, storing virtual
    machines, etc. (the rest, ca. 1 GB). The *Testing* Ubuntu
    (AFT Ubuntu) is used to be able to have a fresh system for testing
    out installations and is exclusively used to make experiments.

-   Get Windows 7 and Ubuntu virtual machines with basic installations
    (cygwin, ssh, git, rsync) up and running in VirtualBox
    (with guest-additions). Then clone them and assign different
    hostnames and ip adresses to distinguish them from each other. Make
    sure that they are all connected to each other (ping ip’s).

* Misc Project Notes
** Things I need to read and do to achieve 2d animations of simple geometriews with Panda3d

- Learn more about the *Intervals* system, which can playback scripted actinos

- Advanced operations with Panda3D's internal structures

- export .egg animations from blender and play them back in panda3d

* Misc 
** Sympy rendering latex 

to a semi-transparent bitmap buffer and displaying that in panda3d ** - Ok, done
that. As it turns out, it's probably easier to handle it differently. But with
some refining it may still be an option. It doesn't give you the full power of
latex though. You may not be able to play tikz images. 
** Vim: formatting/breaking long lines
    gq{motion} % format the line that {motion} moves over
    {Visual}gq % format the visually selected area
    gqq        % format the current line
    
    re-connect broken lines with Shift + J    

* Unstructured

Fr 18. Mai 10:16:40 CEST 2018
- scale latex textured quad to appropriate dimensions - DONE
- find a way to compile and load a latex texture procedurally, then display it - DONE

Matrix Representation within Panda3d differs from normal opengl/glm
    for all about panda3d's versions: 
    https://www.panda3d.org/manual/index.php/Matrix_Representation
    It appears as if p3d's Mat4 (LMatrix4f) are the transposed versions of the normal opengl/glm convention. So, you need to always transform your matrices into the right format when using i.e. pyglm. 
    The properly formatted p3d matrices for simple translation/rotation operations
    one can retrieve directly with a call to e.g. 
    ```
    static LMatrix4f translateMat   (   const LVecBase3f    trans   )   static
    ```
    (see https://www.panda3d.org/reference/1.9.4/python/panda3d.core.LMatrix4f#af0d0c9acb09597d82fa981aa804faa7a)

Vim command to make the splits the same size
    Ctrl + W = 

To display info about a package in pip, do (e.g. for panda3d)
    pip show panda3d

Installing panda3d on ubuntu with python already installed is easy:
    just follow the instructions at
    https://github.com/panda3d/panda3d


So 20. Mai 20:54:19 CEST 2018

- get animation (moving quads) to work - DONE

Attention when manually setting triangle geometry points directly in OpenGL or
indirectly through Panda3d with addData3f and addVertices. Sometimes, it may
occurr that the indices must be shuffled around before a (single) triangle
appears on screen. May have to do with direction (clockwise or counterclockwise
(or has it?))

Di 5. Jun 14:06:39 CEST 2018

Cutting the videos based on start and end time using ffmpeg
https://stackoverflow.com/a/42827058

Copy to clipboard with xclip, even works in my current tmux/zsh configuration:
alias pbc='xclip -selection clipboard'


Do 7. Jun 14:41:18 CEST 2018

The Current working directory can be retrieved in python using

from pathlib import Path, PurePath
print(Path.cwd())

Get full file path of a file
readlink test.txt -f
or in vim: 
:!readlink -f %
this next thing also works, this was added to coreutils later on: 
realpath test.txt



Di 3. Jul 11:54:30 CEST 2018

Meeting: 
- We don't necessarily need real-space simulations
- Oxygen diffusion may not be that much of a problem when going with the
  assumption that the process is reaction-limited and therefore using "only"
  topological KMC


Sun Jul  8 14:38:14 CEST 2018

- Latex: always use KOMA-Classes. 
- If you want to use margin notes like with marginpar, but expand it at the end
  of a page properly, use KOMA's makenote instead
- makenote saves the arguments into an auxiliary file. If you use any latex
  commands in a makenote, make sure to \protect them.


Sun Aug  5 23:47:43 CEST 2018

- In Rischke I (Klassische Mechanik), there are a lot of good explicit
  calculations, especially regarding the equivalence of the 3 approaches to
  defining a conservative force field.

- In Freudenthal's *Mathematics as an Educational Task*, p. 555-556, the
  confusion with the sometimes left-out explicit dependencies by physicists is
  explained.


Mon Aug 20 13:19:40 CEST 2018

- python: using a star import is considered a bad design. Only use things that
  are really needed, if you find yourself doing a lot of repetitive importing 
  work, then consider restructuring your program



Do 13. Sep 13:07:56 CEST 2018

- show/copy/edit the current path in nautilus: [Ctrl]+[l]

- tip: inkscape can do basic image annotating/highlighting/cropping very well


Mi 3. Okt 21:32:31 CEST 2018

- copy into / paste from system clipboard in linux: "+y and "+p

- completion: [Ctrl]+[p] and [Ctrl]+[n] for 'previous' and 'next'



Sat Oct  6 11:14:28 CEST 2018

Notes to learning Clojure within Emacs: 

Compile Clojure Program: 
C-c C-k

Cider is a terminal for executing Clojure programs interactively. You can
activate cider using 
M-x cider-jack-in

A selected region in Emacs can be deleted with 
C-w

To run the last command again in cider, use 
M-p
or 
C-x arrow-up

To run the current line you're editing, use
C-x C-e
(be sure your cursor is at the end of the line)


Sun Oct  7 10:23:05 CEST 2018

- latex: \eqref{eq:some} refers to some equation and prints out the number with
  parentheses, like (2)


Do 18. Okt 15:32:32 CEST 2018

List your Devices and drives with filesystem types with
sudo parted -l
or 
sudo fdisk -l

Remove ecryptfs' encryption from hard drive on ubuntu
ecryptfs-setup-private --undo

Switch between windows in Evil-mode with 
C-w h/j/k/l
and undo/redo window configurations with
C-c h/l


Fr 19. Okt 23:00:41 CEST 2018

When org-mode tells you 
```
Process 'org-export-process' exited abnormally
```
when you were trying to asyncronously export to latex + pdf, then, as far as I gathered from googling around, the async process launches a new emacs instance in the background that takes care of the compilation. But that emacs instance by default doesn't get a proper init file and so doesn't load the needed libraries to correctly do a then synchronous latex + pdf export. What I did was I told the async emacs process to use my .emacs as an init file 
```
(setq org-export-async-init-file "~/.emacs")
```
and all was well, since synchronously I could always export it without any problems using that .emacs init file. This way it also loads a bunch of stuff that the async emacs instance actually doesn't need for latex exporting, so it may be slow but for my purposes it's enough right now.


Do 22. Nov 22:27:24 CET 2018

With the Unity Compiz Window Management Extra Tool 'Put', you can set keyboard shortcuts to move a window from one montior to another (within the workspace).

I've set it now to 
```
<SHIFT><ALT><RIGHT>
<SHIFT><ALT><LEFT>
```
as opposed to 
```
<SHIFT><ALT><CONTROL><RIGHT>
<SHIFT><ALT><CONTROL><LEFT>
```
which moves the window between workspaces.

Together with snapping 
```
<SUPER><CONTROL><LEFT>
<SUPER><CONTROL><RIGHT>
<SUPER><CONTROL><UP>
<SUPER><CONTROL><DOWN>
```
and navigating (more explicit switching)
```
<SUPER>w  # current workspace
<SUPER>w  # all workspaces
```
(btw., you can also search for windows' names in this layed-out swicher-modeby
just starting to type)
and cycling through windows
```
<Shift><Alt>Tab  # current workspace
<Shift><Control><Alt>Tab  # all workspaces
```
it's a similar workflow to tiling managers, but still has the advantage of not
being a tiling manager and keeping further utilities for e.g. sound.
It's almost orgasmic.


Fri Nov 23 11:50:00 CET 2018

`apt` was locked, so I searched what was locking it:
```
ps -aux | grep lock
```
After a quick search, I found I had to shut down the daily updating service,
which was blocking apt (there was no update window):
```
sudo systemctl stop apt-daily.service
```
It worked after that.


Fri Nov 23 14:29:10 CET 2018

I configured pdf-history. Now, I can use `B` and `F` to
navigate backward and forward in a pdf file's history.

Previously, these keybindings were overridden by evil-mode.
You can look up `evil-guide` on github, which tells you how you can redefine
evil keys with precedence settings.


Fr 22. Feb 15:43:45 CET 2019

To run multiple instances of Code::Blocks, open up as many terminals as you
like and type 
```
codeblocks --multiple-instance --no-ipc
```
into each terminal.


Sa 27. Apr 19:56:56 CEST 2019

To batch-rename all files in a folder, do e.g.
```
$ for file in *; do mv "$file" "3-$file"; done
```

To switch off org-mode formatting, you must enter another major-mode
to view and edit the .org file in plain text, switch to e.g.
fundamental-mode.
```
M-x fundamental-mode
```

After editing manually, switch org-mode back on
```
M-x org-mode
```

Mo 5. Aug 12:54:30 CEST 2019
to quickly redefine elisp functions, type ~C-M-x~ when inside the function.
